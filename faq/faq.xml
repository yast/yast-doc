    <qandaset>
        <?dbhtml toc="1" ?>
        <?dbhtml cellspacing="3px" cellpadding="3px" ?>

        <qandadiv>
            <title>General / Unsorted</title>
	    <qandaentry id="">
		<question>
		    <para>How to comment functions and variables</para>
		</question>
		<answer>
		    <para>
			This section describes how to comment functions for other
			YaST tools to let them generate documentation automatically.
			Documentation is generated by script
		    </para>

		    <para>
			<literal>/usr/lib/YaST2/bin/ycpdoc</literal> which can be found
			in the <literal>yast2-devtools</literal> package. See more detailed
			information by typing
			<literal>perldoc /usr/lib/YaST2/bin/ycpdoc</literal>. More examples
			can be found in the <literal>yast2-devtools</literal> package or
			in the <literal>/usr/share/doc/packages/yast2-devtools/ycpdoc/example/</literal>
			directory.
		    </para>

		    <para>
			This is the exemplary file header
		    </para>
		    <programlisting><xi:include href="examples/file_header.ycp" parse="text"
			xmlns:xi="http://www.w3.org/2003/XInclude"/>
		    </programlisting>

		    <para>
			ycpdoc recognizes comments when they are marked with special syntax
		    </para>
		    <programlisting>/**
 * some description
 * can be multiline
 */</programlisting>

		    <para>
			Exemplary function comment
		    </para>
		    <programlisting><xi:include href="examples/function_description.ycp" parse="text"
			xmlns:xi="http://www.w3.org/2003/XInclude"/>
		    </programlisting>

		    <para>
			Exemplary variable descriptions
		    </para>
		    <programlisting><xi:include href="examples/variable_description.ycp" parse="text"
			xmlns:xi="http://www.w3.org/2003/XInclude"/>
		    </programlisting>
		</answer>
	    </qandaentry>
            <qandaentry id="faq_read_write">
                <question>
                    <para>How to read and write text files in YaST?</para>
                </question>
                <answer>
                            <para>
                                Use <literal>.target.string</literal> path of 'system agent' to
                                manipulate with the text files. 
                            </para>
                            <para>
                                The <literal>Read</literal> function returns the whole contents as a one
                                string, with the write variant you can rewrite the file.
                            </para>
			    <programlisting><xi:include href="examples/scr_target_string.ycp" parse="text"
				xmlns:xi="http://www.w3.org/2003/XInclude"/></programlisting>
                            <para>
                                Documentation of system agent can be found at
                                <filename>/usr/share/doc/packages/yast2-core/agent-system</filename>
                            </para>
                            <para>
                                Check for existing SCR agents for various configuration files. 
                            </para>
                            <para>
                                If you want to read/edit/write known config file, it is
                                very likely that SCR agent for this file already exists. The
                                easy way to find this out is grep the files under
                                <filename>/usr/share/YaST2/scrconf/</filename> directory
				for the file name.
                            </para>
                            <para>
                                If you want to manipulate with a file contents
                                (e.g. delete or rewrite some line) it is possible to use
                                <literal>AsciiFile</literal> module, which describes the file
				by the map.
                            </para>
                            <programlisting>
map file = $[];
AsciiFile::ReadFile (file, "/tmp/myfile");
// now you can check the 'file' map manually
// or using AsciiFile interface ...
AsciiFile::RewriteFile (new_map, "/tmp/myfile");
                            </programlisting>
                            <para>
                                For more, look directly into <filename>/usr/share/YaST2/modules/AsciiFile.ycp</filename>.
                            </para>
                    <informalexample>
                        <programlisting><xi:include href="examples/asciifile.ycp" parse="text"
                            xmlns:xi="http://www.w3.org/2003/XInclude"/>
                        </programlisting>                        
                    </informalexample>
                </answer>
            </qandaentry>
            <qandaentry id="faq_sysconfig">
                <question>
                    <para>How to read and write sysconfig values?</para>
                </question>
                <answer>
                    <para>
                        First, you need the <literal>scr</literal> file which actually
			calls an agent that
                        handles this type of files. In this case it is done using the so
                        called <literal>ini agent</literal> which can handle multiple
			types of config files, not only ini files. 
                    </para>
                    <informalexample>
                    <para>
                        The following listing is an example scr script which calls the ini agent special
                        handling for <literal>sysconfig</literal> files:
                        <programlisting><xi:include href="examples/cfg_novell_apache.scr" parse="text"
                            xmlns:xi="http://www.w3.org/2003/XInclude"/>
                        </programlisting>                        
                        Now, this file has to be installed in
			<filename>/usr/share/YaST2/scrconf/</filename> directory.
                        In you ycp code, you can access the variable TESTING the
                        following way: 
                        <programlisting>
                            
string test = (string) SCR::Read(.sysconfig.novell-apache.TESTING);
                        </programlisting>
                        <para>and you can write it:</para>
                        <programlisting>
                            
SCR::Write(.sysconfig.novell-apache.TESTING, "a value");
                        </programlisting>
                        For most sysconfig files, there already exist the agents -
                        you can grep in <filename>/usr/share/YaST2/scrconf/</filename>
			directory for the file name you are looking for.
                    </para>
                    </informalexample>
                    <programlisting>
// read the BASE_CONFIG_DN variable from /etc/sysconfig/ldap
string base_config_dn = SCR::Read (.sysconfig.ldap.BASE_CONFIG_DN);

// ... and save the new value
SCR::Write (.sysconfig.ldap.BASE_CONFIG_DN, new_dn); 
                    </programlisting>
                    <para>
                        For documentation, see
                        <filename>/usr/share/doc/packages/yast2-core/agent-ini/ini.html</filename>
                    </para>
                    <informalexample>
                        <programlisting><xi:include href="examples/sysconfig.ycp" parse="text"
                            xmlns:xi="http://www.w3.org/2003/XInclude"/>
                        </programlisting>                        
                    </informalexample>
                </answer>
            </qandaentry>

            <qandaentry id="faq_bash">
                <question>
                    <para>How to run external programs?</para>
                </question>
                <answer>
                    <para>
                        Use 'system agent' documented in
			<filename>/usr/share/doc/packages/yast2-core/agent-system/</filename>.
			    <programlisting><xi:include href="examples/bash_use.ycp" parse="text"
				xmlns:xi="http://www.w3.org/2003/XInclude"/></programlisting>
                        Using <literal>.target.bash</literal> path you can run bash
			command, defined by the
                        string parameter. The last parameter can be used to give initial
                        environment definitions to the target. The keys have to be
                        strings, the values can be of any type. The return value is an
                        integer with the exitcode. If you use
			<literal>.target.bash_output</literal> path, the return value
			will be the map: 
                        <programlisting>$[
    "exit" : &lt;integer&gt;,  //exitcode from shell script
    "stdout" : &lt;string&gt;, //stdout of the command
    "stderr" : &lt;string&gt;  //stderr of the command
]</programlisting>
                    </para>
                    <informalexample>
                        <programlisting><xi:include href="examples/bash.ycp" parse="text"
                            xmlns:xi="http://www.w3.org/2003/XInclude"/>
                        </programlisting>                        
                    </informalexample>
                </answer>
            </qandaentry>
            <qandaentry id="faq_proposals">
                <question>
                    <para>Where are proposal screens handled during 2nd stage of
                        installation?</para>
                </question>
                <answer>
                    <para>
                        For each proposal the control file <filename>/var/lib/YaST2/control.xml</filename>
			contains a
                        list of <literal>clients</literal> to be called.
			The tag <literal>&lt;proposal&gt;</literal>
                        describes the name of the client. Then, the name is suffixed by
                        <literal>_proposal</literal>, for instance
			<literal>proxy_proposal.ycp</literal>,
			and such client is started via WFM::Call. The required
                        action is done by a command line argument. Each proposal client
                        has to implement the following arguments:
                    </para>
                    <itemizedlist>
                        <listitem>
                            <para>
                                <literal>MakeProposal</literal> - prepare a proposal, return its summary
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                <literal>AskUser</literal> - start the GUI for user to manually modify the proposal
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                <literal>Description</literal> - return a map for title, entry in the menu button
                                and your id
                            </para>
                        </listitem>
                        <listitem>	    
                            <para>
                                <literal>Write</literal> - user accepted the proposal, write it down
                            </para>
                        </listitem>
                    </itemizedlist>
                    <para>
                        For more details see *_proposal.ycp clients in
                        <filename>/usr/share/YaST2/clients/</filename> directory and documentation in
			<filename>/usr/share/doc/packages/yast2-installation/</filename>.
                    </para>
                </answer>
            </qandaentry>
	    <qandaentry id="faq_where_are_logs">
		<question>
		    <para>Where the YaST2 logs can be found?</para>
		</question>
		<answer>
		    <para>
		    Logs are situated in the <filename>/var/log/YaST2/</filename> directory. They are
		    named <filename>y2log</filename> and from <filename>y2log-1</filename> to
		    <filename>y2log-9</filename>, rotated in the size at about 1.1 MB.
		    </para>
		</answer>
	    </qandaentry>
	    <qandaentry id="faq_howto_log">
		<question>
		    <para>How is YaST2 logging done?</para>
		</question>
		<answer>
		    <para>
			YaST2 loggings are done using y2* built-in functions. This is a simple
			program, which should help us with the logging.
		    </para>
                        <programlisting><xi:include href="examples/y2logs.ycp" parse="text"
                            xmlns:xi="http://www.w3.org/2003/XInclude"/>
                        </programlisting>
		    <itemizedlist>
                        <listitem>
			    <para>
				<literal>y2debug</literal> is used only for the debugging
				information, only for testing because it is not logged during
				the normal run of the YaST2. It is usable only for the developer.
			    </para>
			</listitem>
			<listitem>
			    <para>
				<literal>y2milestone</literal> is used for logging some
				important information. For instance
				<literal>Configuration has been changed, saving into the '/etc/any.conf'</literal>.
			    </para>
			    <programlisting>y2milestone("Configuration has been changed, saving into the '%1'",
    "/etc/any.conf");</programlisting>
			</listitem>
			<listitem>
			    <para>
				<literal>y2warning</literal> is used to announce that something would go
				wrong. For instance when any configured card has been lost after the reboot.
			    </para>
			</listitem>
			<listitem>
			    <para>
				<literal>y2error</literal> is used for major problems. For instance if
				YaST2 didn't find what it expected and needed.
			    </para>
			</listitem>
			<listitem>
			    <para>
				<literal>y2security</literal> is not used.
			    </para>
			</listitem>
			<listitem>
			    <para>
				<literal>y2internal</literal> is not used.
			    </para>
			</listitem>
		    </itemizedlist>
		    <para>
			And this is the part of the log found in the logfile
			<filename>/var/log/YaST2/y2log</filename> after we have runned
			<literal>Y2DEBUG=1 yast2 y2logs.ycp</literal>, we would not see any
			<literal>debug</literal> information if we would run
			<literal>yast2 y2logs.ycp</literal> only.
		    </para>
		    <programlisting>2004-09-21 10:04:13 &lt;0&gt; wizard(5964) [YCP] y2logs.ycp:2 debug
2004-09-21 10:04:13 &lt;1&gt; wizard(5964) [YCP] y2logs.ycp:3 milestone
2004-09-21 10:04:13 &lt;2&gt; wizard(5964) [YCP] y2logs.ycp:4 warning
2004-09-21 10:04:13 &lt;3&gt; wizard(5964) [YCP] y2logs.ycp:5 error
2004-09-21 10:04:13 &lt;4&gt; wizard(5964) [YCP] y2logs.ycp:6 security
2004-09-21 10:04:13 &lt;5&gt; wizard(5964) [YCP] y2logs.ycp:7 internal</programlisting>
		    <para>
			Format of the log is [year]-[month]-[day] [time] [log-weight] [process-name](PID)
			[library] [filename]:[line-number] [message].
			y2* built-in functions accepts maximally 9 parameters of variables:
		    </para>
		    <programlisting>y2milestone("This is the example for %3, %4, %1 and %2",
    "1st parameter", "2nd parameter", "3rd parameter", "4th parameter");</programlisting>
		    <para>
			Each %[number] is replaced by the corresponding variable.
			Parameters can be all types (function, boolean, integer, map ...).
		    </para>
		</answer>
	    </qandaentry>
	    <qandaentry id="faq_marking_text_for_translations">
		<question>
		    <para>How to mark any text for the translation?</para>
		</question>
		<answer>
		    <para>
			There are two internal functions for marking the text for the
			translation. They are <literal>_(string text)</literal> (single
			underscore) in YCP and <literal>__(string text)</literal> (double
			underscore) in Perl. It is needed to place every single calling
			of the function on the separate line because of making
			<literal>.pot</literal> file. Every text marked for translation
			should be commented above for the translators.
		    </para>
                        <programlisting><xi:include href="examples/translations.ycp" parse="text"
                            xmlns:xi="http://www.w3.org/2003/XInclude"/>
                        </programlisting>
		</answer>
	    </qandaentry>
            <qandaentry id="faq_validation">
                <question>
                    <para>What kinds of VALIDATION code has been implemented in modules?</para>
                </question>
                <answer>
                    <para>
                        For simple syntax validation there is a lot of it, but only the
                        basic ones are grouped together in the <literal>yast2.rpm</literal>.
			Those are:
                    </para>
                    <itemizedlist>
                        <listitem>
                            <para>
                                <literal>IP::Check(), IP::Check4(), IP::Check6()</literal> for IP addresses checking
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                <literal>Hostname::Check(), Hostname::CheckDomain(), Hostname::CheckFQ()</literal> for Hostnames (DNS)
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                <literal>Address::Check(), Address::Check4(), Address::Check6()</literal>
                                for addresses (IP or a hostname)
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                <literal>Netmask::Check(), Netmask::Check4(), Netmask::Check6()</literal>
                                for netmasks
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                <literal>URL::Check()</literal> for URL syntax
                            </para>
                        </listitem>
                    </itemizedlist>
                    <para>
                        For the rest you need to lookup in the corresponding YaST modules.
                    </para>
                    <informalexample>
                        <programlisting><xi:include href="examples/validation.ycp" parse="text"
                            xmlns:xi="http://www.w3.org/2003/XInclude"/>
                        </programlisting>                        
                    </informalexample>
                </answer>
            </qandaentry>
            <qandaentry id="faq_wizard_examples">
                <question>
                    <para>Are there some good examples of the use of Wizard? Any documentation?
                    </para>
                </question>
                <answer>
                    <para>
                        See <filename>/usr/share/doc/packages/yast2/wizard/examples/</filename> and
                        <filename>/usr/share/doc/packages/yast2-core/libyui/examples/Wizard...</filename> 
                    </para>
                    <para>
                        The wizard is controlled by the Wizard YCP module
			(<literal>import "Wizard"</literal>).
                        It's documentation is in
			<filename>/usr/share/YaST2/modules/Wizard.ycp</filename>.
                    </para>
		</answer>
            </qandaentry>
            <qandaentry id="faq_wizard_desktopicon">
		<question>
		    <para>What is the semantics of Wizard::SetDesktopIcon ("proxy") ?</para>
		</question>
		<answer>
		    <para>
			This sets the icon at the left side of the dialog title label
			to the one used by the yast2-proxy desktop file.
			It is the same as appears in the yast2 control center.
		    </para>
                </answer>
            </qandaentry>
            <qandaentry id="faq_wizard_createdialog">
		<question>
		    <para>What is the semantics of Wizard::CreateDialog() ?
		    </para>
		</question>
		<answer>
		    <para>
			This creates a <literal>Wizard</literal> Dialog. This is the basic
			framework used in YaST screens with help on the left and
			the YaST graphics on top. At the bottom there are
			usually three buttons, <literal>Back</literal>,
			<literal>Abort</literal> and <literal>Next</literal>.
			This is how a workflow is implemented. However, in the
			last step of a workflow, naming the rightmost button
			"next" isn't appropriate.
			
			<programlisting>Wizard::SetNextButton (`next, Label::FinishButton);</programlisting>
			replaces the button caption with "Finish".
		    </para>
		    <para>
			In some dialogs you need to hide some default buttons
			or to restorem them again.
			<programlisting>Wizard::HideBackButton ();</programlisting>
			hides the Back button.
			<programlisting>Wizard::RestoreAbortButton ();</programlisting>
			restores hidden Abort button.
		    </para>
                </answer>
            </qandaentry>
            <qandaentry id="faq_skeleton">
                <question>
                    <para>What is the meaning of YCP files generated by y2tool?</para>
                </question>
                <answer>
                    <para>
                        TODO ... more about templates, and devtools
                    </para>
                </answer>
            </qandaentry>
            <qandaentry id="faq_editors">
                <question>
                    <para>Has anyone created a YaST mode for EMACS?</para>
                </question>
                <answer>
                    <para>
			TODO
			<!--
			<ulink url="examples/ycp-mode.el">
			Take this.
			</ulink>
			-->
                    </para>
		    <para>
			Syntax file for VIM is part of SUSE's vim package.
		    </para>
                </answer>
            </qandaentry>
            <qandaentry id="faq_user_scripts">
                <question>
                    <para>How to add a user using a script?</para>
                </question>
                <answer>

                    <para>
                        For documentation of whole Users module API, look at
                        <filename>/usr/share/YaST2/modules/YaPI/USERS.pm</filename>
                    </para>
                    <example>
                        <title>YCP script</title>
                        <programlisting><xi:include href="examples/adduser.ycp" parse="text"
                            xmlns:xi="http://www.w3.org/2003/XInclude"/>
                        </programlisting>                        
                    </example>
                    <example>
                        <title>Perl script</title>
                        <programlisting><xi:include href="examples/adduser.pl" parse="text"
                            xmlns:xi="http://www.w3.org/2003/XInclude"/>
                        </programlisting>                        
                    </example>
                    <example>
                        <title>Perl script for LDAP user</title>
                        <programlisting><xi:include href="examples/adduser_ldap.pl" parse="text"
                            xmlns:xi="http://www.w3.org/2003/XInclude"/>
                        </programlisting>                        
                    </example>
                </answer>
            </qandaentry>
	    <qandaentry id="faq_viewing_maps">
		<question>
		    <para>Could be any map seen as a tree?</para>
		</question>
		<answer>
		    <para>
			Maps which you can find in y2log are not human-readable. You can use
			the tree view in UI which is the one you can find in yast2-testsuite
			package.
		    </para>
                        <programlisting><xi:include href="examples/debug_map.ycp" parse="text"
                            xmlns:xi="http://www.w3.org/2003/XInclude"/>
                        </programlisting>
		    <para>
			As you can see, this is very ugly map. Run
			<literal>yast2 debug_map.ycp</literal> to open the UI
			tree and browse the map.
		    </para>
		</answer>
	    </qandaentry>
	    <qandaentry id="faq_creating_module">
		<question>
		    <para>How to create a new YaST module</para>
		</question>
		<answer>
		    <para>Use the <literal>/usr/bin/y2tool create-new-package</literal>.
		    <literal>y2tool</literal> is included in the <literal>yast2-devtools</literal>
		    package.</para>
		    <para><literal>/usr/bin/y2tool create-new-package -s</literal> returns
		    a list of available skeletons. They are:</para>
		    <itemizedlist>
			<listitem><para>agent - SCR agent skeleton</para></listitem>
			<listitem><para>config - YaST configuration module skeleton</para></listitem>
			<listitem><para>trans - YaST translation</para></listitem>
		    </itemizedlist>
		    <para>To create a new YaST module run: <literal>/usr/bin/y2tool
		    create-new-package -v config module-name "Maintainer Name"
		    maintainer@email.com</literal></para>
		</answer>
	    </qandaentry>
        </qandadiv>

	<qandadiv>
	    <title>Testing</title>
	    <qandaentry id="faq_testing_ycp">
		<question>
		    <para>How to test the YCP code?</para>
		</question>
		<answer>
		    <para>
			Use simple command <literal>ycpc -E source.ycp</literal>. It would
			report errors it it would find any.
		    </para>
		    <para>
			Attention: files imported and included in the source are got from
			the default YaST2 directory <filename>/usr/share/YaST2/</filename>
			first of all other locations.
		    </para>
		</answer>
	    </qandaentry>
	    <qandaentry id="faq_test_scr">
		<question>
		    <para>How to test the SCR agent?</para>
		</question>
		<answer>
		    <para>
		    Use the <literal>/usr/lib/YaST2/bin/y2base stdio scr</literal> command
		    which allows you to send commands directly to the SCR. Commands are
		    <literal>`Dir(path)</literal>, <literal>`Read(path)</literal> and
		    <literal>`Write(path)</literal>.
		    </para>
		    <informalexample>
			<programlisting><xi:include href="examples/y2base_stdio.example" parse="text"
			    xmlns:xi="http://www.w3.org/2003/XInclude"/></programlisting>
		    </informalexample>
		</answer>
	    </qandaentry>
            <qandaentry id="faq_services">
                <question>
                    <para>How to start and stop services?</para>
                </question>
                <answer>
                    <itemizedlist>
                        <listitem><para>Service Manipulation</para>
			    <programlisting><xi:include href="examples/service_manipulation.ycp" parse="text"
				xmlns:xi="http://www.w3.org/2003/XInclude"/></programlisting>
                        </listitem>

                        <listitem><para>Service Enabling</para>
			    <programlisting><xi:include href="examples/service_handling.ycp" parse="text"
				xmlns:xi="http://www.w3.org/2003/XInclude"/></programlisting>
                        </listitem>

                        <listitem><para>Service Information</para>
			    <programlisting><xi:include href="examples/service_information.ycp" parse="text"
				xmlns:xi="http://www.w3.org/2003/XInclude"/></programlisting>
                        </listitem>
                    </itemizedlist>

                    <para>
                        Documentation can  be found in
                        <filename>/usr/share/doc/packages/yast2/runlevel/</filename>
                    </para>

                    <informalexample>
                        <programlisting><xi:include href="examples/services.ycp" parse="text"
                            xmlns:xi="http://www.w3.org/2003/XInclude"/>
                        </programlisting>
                    </informalexample>
                </answer>
            </qandaentry>
	    <qandaentry id="faq_testing_fisrststage_installation">
		<question>
		    <para>How to test the first stage installation (before reboot)?</para>
		</question>
		<answer>
		    <para>
		    ...
		    </para>
		</answer>
	    </qandaentry>
	    <qandaentry id="faq_testing_secondstage_installation">
		<question>
		    <para>How to test the second stage installation (after reboot)?</para>
		</question>
		<answer>
		    <para>
		    ...
		    </para>
		</answer>
	    </qandaentry>
	    <qandaentry id="faq_testing_installation_proposal">
		<question>
		    <para>How to test the installation proposals?</para>
		</question>
		<answer>
		    <para>
			You can use this code to test the `network installation proposal:
		    </para>
                        <programlisting><xi:include href="examples/network_proposal.ycp" parse="text"
                            xmlns:xi="http://www.w3.org/2003/XInclude"/>
                        </programlisting>
		    <para>
			Run <literal>yast2 network_proposal.ycp</literal> to open the UI
			with the appropriate installation proposal.
		    </para>
		    <para>
			There are more proposals with in more stages. You should find it
			in the control.xml file.
			<itemizedlist>
			    <listitem>
				<para>Proposal: <literal>`initial</literal>, Stage
				<literal>initial</literal> for the first stage
				installation</para>
			    </listitem>
			    <listitem>
				<para>Proposal: <literal>`dirinstall</literal>, Stage
				<literal>normal</literal> for the installation into
				the directory</para>
			    </listitem>
			    <listitem>
				<para>Proposal: <literal>`network</literal>, Stage
				<literal>continue</literal> for the second stage network
				configuration</para>
			    </listitem>
			    <listitem>
				<para>Proposal: <literal>`hardware</literal>, Stage
				<literal>continue</literal> for the second stage hardware
				configuration</para>
			    </listitem>
			</itemizedlist>
		    </para>
		</answer>
	    </qandaentry>
	    <qandaentry id="faq_testing_api_functions">
		<question>
		    <para>How to test YaPI and PerlAPI functions?</para>
		</question>
		<answer>
		    <para>
		    There more methods of testing YaPI and PerlAPI functions. Let me show
		    you one of them - simple YCP script.
		    </para>
                        <programlisting><xi:include href="examples/samba.ycp" parse="text"
                            xmlns:xi="http://www.w3.org/2003/XInclude"/>
                        </programlisting>
		    <para>
			Run this simple script using the <literal>yast2 samba.ycp</literal>
			command and see the log for the result. Here are the interesting
			parts of the log:
		    </para>
		    <programlisting>"shares":[
    $["options":[
	$["key":"public", "value":"yes"]],
	"share":"NEW1_SHARE"
    ]
]</programlisting>
		    <para>at the "Export_B".</para>
		    <programlisting>"shares":[
    $["options":[
	$["key":"public", "value":"yes"]],
	"share":"NEW1_SHARE"
    ],
    $["options":[
	$["key":"public", "value":"no"]],
	"share":"NEW2_SHARE"
    ]
]</programlisting>
		    <para>at the "Export_C".</para>
		    <para>
			This is the PerlAPI implementation of the same functionality:
		    </para>
                        <programlisting><xi:include href="examples/samba.pl" parse="text"
                            xmlns:xi="http://www.w3.org/2003/XInclude"/>
                        </programlisting>
		    <para>
			This is another example of the YaPI testing. It will open
			the popup window with an error message.
		    </para>
                        <programlisting><xi:include href="examples/popup.ycp" parse="text"
                            xmlns:xi="http://www.w3.org/2003/XInclude"/>
                        </programlisting>
		</answer>
	    </qandaentry>
	    <qandaentry id="faq_testing_autoyast">
		<question>
		    <para>How to test the AutoYaST?</para>
		</question>
		<answer>
		    <para>
		    ...
		    </para>
		</answer>
	    </qandaentry>
	    <qandaentry id="faq_testing_autoinstallation">
		<question>
		    <para>How to test the AutoInstallation?</para>
		</question>
		<answer>
		    <para>
		    ...
		    </para>
		</answer>
	    </qandaentry>
	</qandadiv>
    </qandaset>

<!--
> Wizard::SetDesktopIcon("proxy");

-->

