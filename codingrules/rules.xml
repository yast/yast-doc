<?xml version="1.0"?>
<!DOCTYPE article PUBLIC
  "-//OASIS//DTD DocBook XML V4.3//EN"
  "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"
[
    <!ENTITY version "0.02">
    <!ENTITY document-maintainer "lukas.ocilka@suse.cz">
]>

<!--

  General Rules:
  ==============
    Particular Tutorials:  <chapter>...</chapter>
    First Class Sections:  <section id="xyz">...</section>
    Other Class Sections:  <section>...</section>
    Titles:                <title>First Letter Upper-Cased</title>
    Section Abstracts:     <abstract>...Abstract text...</abstract>
    Outer Links:           <ulink url="../where">Link Text</ulink>
    Internal Links:        <link linkend="linked_section_id">Link Text</link>
    Emphasization:         <emphasis>Phrase</emphasis>
    Commands:              <command>command</command>
    Commented Commands:    <screen>y2tool create-yast3</screen>
    Source Code:           <programlisting>a = 1;</programlisting>
    Lists:                 <itemizedlist><listitem>...</listitem></itemizedlist>
    Files and Directories: <filename>/usr/share/...</filename>
    SCR Agent Paths:       <filename>.agent.path</filename>

//-->

<article class="whitepaper" lang="en">
  <articleinfo>
    <!-- Unknown author? -->
    <date>2006-19-05</date>
  </articleinfo>

  <title>YaST2 Developer Pages: Coding Rules</title>
  <abstract>
    <screen><command>Any fool can write code that a computer can understand.
Good programmers write code that humans can understand.</command>

    <emphasis>Martin Fowler</emphasis> in: <emphasis>Refactoring, improving the design of existing code</emphasis></screen>

    <para>Having multiple developers working on the same source code creates a need for a
    basic set of coding rules to adhere to. A proper code layout makes it a lot
    easier for others to read, understand, enhance, debug, and clean-up code.</para>

    <para>Having a coding style is quite common. Two of the more prominent examples are
    The <emphasis>Linux kernel</emphasis> coding style
    <ulink url="file:////usr/src/linux/Documentation/CodingStyle">/usr/src/linux/Documentation/CodingStyle</ulink>
    and the <emphasis>GNU coding standard</emphasis>
    <ulink url="http://www.gnu.org/prep/standards/">http://www.gnu.org/prep/standards/</ulink>.</para>
  </abstract>

    <sect1 id="preamble">
	<title>Preamble</title>
	<para>
	    This document describes how to layout code written in <emphasis>YCP</emphasis>:
	    how to name your variables and functions, how to place braces, and how to indent blocks.
	</para>

	<para>
	    Most programmers have a personal style of writing code. The rules presented here 
	    might not match your personal preferences, but will help everyone work on the 
	    code as a team. Helping out and fixing bugs is easier with a common coding style.
	</para>

	<para>
	    The following set of rules tries to be complete, but probably isn't. Feel free
	    to write the maintainer, <ulink url="mailto:&document-maintainer;">&document-maintainer;</ulink>,
	    about mistakes and omissions.
	</para>

	<para>
	    These rules should apply to <emphasis>C</emphasis>, <emphasis>C++</emphasis>,
	    and <emphasis>YCP</emphasis> code alike, even though the examples use <emphasis>YCP</emphasis>.
	    As much as possible, additionally apply them to <emphasis>Perl</emphasis> code.
	</para>
    </sect1>

    <sect1 id="fileheader">
	<title>The File Header</title>
	<para>
Every file must begin with a proper header. This header should be started within 
the first 10 lines of the file, so it is visible when loading the file in an 
editor. The file header must include:</para>

	<itemizedlist>
	    <listitem><para>The filename</para></listitem>
	    <listitem><para>The file purpose summary (in one line)</para></listitem>
	    <listitem><para>The author's name and e-mail address</para></listitem>
	    <listitem><para>A few lines describing the contents</para></listitem>
	</itemizedlist>

	<para><command>Do</command></para>
	<screen>/**
 * File:
 *   io.ycp
 *
 * Module:
 *   Security configuration
 *
 * Summary:
 *   Input and output functions.
 *
 * Authors:
 *   Michal Svec &lt;msvec@suse.cz&gt;
 *
 * $**Id$
 *
 * There are in this file all functions needed for
 * the input and output of security settings.
 */</screen>

	<para><command>Don't</command></para>
	<screen>{
  // a small example with no version and no hint
  // about the author.
  return 42;
}</screen>

    </sect1>
    
    <sect1 id="indentation">
	<title>Indendation</title>
	<para>
	    Among developers, indentation of code is one of the most heated points of 
	    discussion. There are several 'good' ways to use
	    whitespace when writing source code and all are 'right'
	    in some respect. The only bad indentation is no indentation
	    at all.
	</para>

	<para>
	    To make code easy to read, a common way of using whitespaces is needed across a 
	    team of developers:
	</para>

	<itemizedlist>
	    <listitem><para>Indent by 4 spaces</para></listitem>
	    <listitem><para>Tabs, if used, are 8 spaces wide, replacing two levels of indentation</para></listitem>
	    <listitem><para>Always indent</para></listitem>
	</itemizedlist>

	<para>
	    Only a few lines of a file are allowed to be not indented. These are the initial 
	    comment lines of the file header and the opening and closing braces around the code.
	</para>

	<para><command>Do</command></para>

	<screen>/**
 ... initial header
 */

{   // opening brace at start of code

    // my first variable, 4 spaces indentation

    integer first_int_variable = 42;

    if (first_int_variable > 42)
    {
	// 8 spaces (== 1 tab character) indentation
	doSomething ();
    }
    else
    {
	somethingDifferent();
    }

    // final return

    return first_int_variable;

}   // closing brace</screen>

	
	<para><command>Don't</command></para>
	<screen>	/* ... initial header  */

{	// opening brace at start of code

// my first variable, bad indentation

integer first_int_variable=42;

if(first_int_variable>42) doSomething ();
else somethingDifferent();
return first_int_variable;}</screen>
    </sect1>

    <sect1 id="whitespace">
	<title>Whitespace</title>
	<para>
	    Whitespaces (spaces, tabs, and new line characters) are allowed anywhere in the 
	    code. Proper use of whitespace does make code a lot easier to read and more 
	    pleasing to the eye.
	</para>

	<para>
	    Spaces are mandatory at the following places:
	</para>

	<itemizedlist>
	    <listitem><para>Before an open parenthesis</para>
		<itemizedlist>
		    <listitem><para>At function calls</para></listitem>
		    <listitem><para>At if and while expressions</para></listitem>
		</itemizedlist>
	    </listitem>
	    <listitem><para>After a comma</para>
		<itemizedlist>
		    <listitem><para>At parameter lists in function calls</para></listitem>
		    <listitem><para>At list and map elements</para></listitem>
		</itemizedlist>
	    </listitem>
	    <listitem><para>Before and after a binary operator (= is a binary operator)</para></listitem>
	</itemizedlist>

	<para>
	    New lines are mandatory at the following places:
	</para>

	<itemizedlist>
	    <listitem><para>After every statement. As a rule of thumb, a semicolon must be followed
		by a newline.</para></listitem>
	    <listitem><para>Before and after every opening brace.</para></listitem>
	    <listitem><para>Before and after every closing brace.</para></listitem>
	    <listitem><para>After the initial variable declarations before the first
		statement.</para></listitem>
	    <listitem><para>To separate functional groups. A functional group is this sense
		is a set of variable declarations before a group of computational statements.
		Another example is grouping in preprocessing, computing, and postprocessing
		often used in larger modules.</para></listitem>
	</itemizedlist>

	<para>
	    Use whitespaces at other places you find appropriate to maintain readability.
	</para>

	<para><command>Do</command></para>
	<screen>    if (bool_flag) ...

    while (stay_in_loop) ...

    callFunction ( value1, value2 );

    list a_list = [ 1, 2, 3, 4 ];
    map a_map = $[ 1:`first, 2:`second ];
    boolean test_flag = true;

    if (test_flag)
    {
	integer one = 1;
	boolean two_flag = false;

	callFunction (one, two_flag);
    }</screen>

	<para><command>Don't</command></para>
	<screen>    if(bool_flag) ...
    while(stay_in_loop) ...
    callFunction(value1,value2);
    list a_list=[1,2,3,4];
    map a_map=$[1:`first,2:`second];


    boolean test_flag=true;
    if (test_flag){
	integer one=1;boolean two_flag=false;
	callFunction(one,two_flag);}</screen>

	<para>
	    Some explanation to the above "Don't" example:
	</para>

	<itemizedlist>
	    <listitem><para>There is no blank before the "(" in the if, while, and callFunction
		lines.</para></listitem>
	    <listitem><para>There is no new line to properly separate the group of variable
		declarations from the computational statements.</para></listitem>
	    <listitem><para>There are two variable declarations in the if () block. Without
		whitespace, this is not easily visible.</para></listitem>
	</itemizedlist>
    </sect1>

    <sect1 id="namingandvariables">
	<title>Naming of Variables</title>
	<para>
	    This rule should be easy if you keep in mind that other developers want to read 
	    and understand your code.
	</para>

	<para>
	    The general rule is to use meaningful variable names. When reading the name of a 
	    variable, it should be immediately clear
	</para>

	<itemizedlist>
	    <listitem><para>What kind of value variable represents</para></listitem>
	    <listitem><para>How the variable is used</para></listitem>
	    <listitem><para>Its scope</para></listitem>
	</itemizedlist>

	<para>
	    The length of a variable is unrestricted. Use this fact. To make a clear 
	    distinction between variable names and function names, use _ in variables and 
	    uppercase and lowercase in function names.
	</para>

	<para><command>Do</command></para>
	<screen>    boolean is_sparc = (architecture == "sparc");
    list &lt;map&gt; probed_modems = (list &lt;map&gt;) SCR::Read ( .probe.modem );
    integer list_index = 0;
    map a_modem = $[];

    while (list_index &lt; size (probed_modems))
    {
        a_modem = probed_modems[list_index]:$[];
	doSomething (a_modem, is_sparc);
	list_index = list_index + 1;
    }</screen>

	<para><command>Don't</command></para>
	<screen>    boolean n = (architecture == "sparc");
    list &lt;map&gt; dev = (list &lt;map&gt;) SCR::Read(.probe.modem);
    integer i = 0;
    map m = $[];

    while (i&lt;size(dev))
    {
        m = dev[i]:$[];
	func (m, n);
	i=i+1;
    }</screen>
    </sect1>
    
    <sect1 id="namingoffunctions">
	<title>Naming of Functions</title>
	<para>
	    Like variables, function names should speak for themselves. The above arguments 
	    for naming variables apply also to functions. Instead of _, use mixed uppercase 
	    and lowercase.
	</para>

	<para>
	    It is also helpful to distinguish between global and local functions. Local 
	    functions should start with a lowercase letter, while global functions should 
	    start with an uppercase letter.
	</para>

	<para><command>Do</command></para>
	<screen>    // this is a local function
    writeStringToFile (a_string, file_name);

    // this is a global function
    global_settings = ReadGlobalSettings ();</screen>

	<para><command>Don't</command></para>
	<screen>    f1 (a_string, file_name);
    gs = rgs();</screen>
    </sect1>
    
    <sect1 id="blocksandbraces">
	<title>Blocks and Braces</title>
	<para>
	    There are more ways to place braces around a block than there are computer 
	    languages that use { and }. For YaST2, only two rules about braces are important:
	</para>

	<itemizedlist>
	    <listitem><para>The opening and closing brace are on the same indentation
		level</para></listitem>
	    <listitem><para>The opening brace increases the indentation level by one (which
		equals 4 spaces)</para></listitem>
        </itemizedlist>

	<para><command>Do</command></para>
	<screen>// start of file
// first brace doesn't have any indentation
{
    // 4 spaces indentation
    integer initial_index = 0;

    while (initial_index &lt; 10)
    {
	// incremented indentation level
	initial_index = initial_index + 1;
    }

    return initial_index;
}</screen>

	<para><command>Don't</command></para>
	<screen>{integer initial_index = 0;
while (initial_index &lt; 10){
initial_index = initial_index + 1;}
return initial_index;}</screen>
    </sect1>
    
    <sect1 id="ifthenelsewhile">
	<title>if-then-else, while, etc.</title>
	<para>
	    Always use a block for if and else cases and while statements.
	</para>

	<para><command>Do</command></para>
	<screen>if (value)
{
    aStatement ();
}
else
{
    anotherStatement ();
}

while (stay_in_loop)
{
    doLoopStatement ();
    ...
}</screen>

	<para><command>Don't</command></para>
	<screen>if (value)
aStatement ();else anotherStatement ();

while (stay_in_loop)
doLoopStatement ();</screen>
    </sect1>
    
    <sect1 id="comments">
	<title>Comments</title>
	<para>
	    Comment every function with a structured comment. The comments are used to 
	    generate documentation. The syntax is similar to ydoc (kdoc).
	</para>

	<para><command>Do</command></para>
	<screen>/**
 * Update the SCR from the map of all security settings
 *
 * @param map settings a map of all security settings
 * @return boolean success
 */

boolean SecurityWrite (map settings)
{
    ...
}</screen>
    </sect1>
    
    <sect1 id="otherhabits">
	<title>Other Habits</title>
	<para>
	    This is a small list of other things to consider when writing code
	</para>

	<itemizedlist>
	    <listitem><para>Superfluous whitespace in the source.</para>
		<itemizedlist>
		    <listitem><para>For <emphasis>vi</emphasis> users, adding
			<screen>syntax on
let c_space_errors=1</screen>
			should help.</para>
		    </listitem>
		    <listitem><para>In <emphasis>Emacs</emphasis>, set the variable
			<emphasis>show-trailing-whitespace</emphasis> (also see
			<emphasis>whitespace.el</emphasis>).</para>
		    </listitem>
		</itemizedlist>
	    </listitem>
	    <listitem><para>Replace blanks with tabs. Because a tab character equals
		8 spaces, numerous spaces should be replaced by tabs.</para>
	    </listitem>
	</itemizedlist>
    </sect1>
</article>

<!-- Keep this comment at the end of the file
Local variables:
mode: xml
coding: utf-8
sgml-indent-step: 1
End:
-->



