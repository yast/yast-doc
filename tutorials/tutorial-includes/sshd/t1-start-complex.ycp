<?xml version="1.0"?>
<programlisting>
/**
 * File: include/sshd/complex.ycp
 ...
 */

{

textdomain "sshd";

import "Label";
...
import "<command>Sshd</command>";


include "sshd/helps.ycp";

...

/**
 * Read settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol <command>ReadDialog()</command> {
    Wizard::RestoreHelp(HELPS["read"]:"");
    // Sshd::AbortFunction = PollAbort;
    if (!Confirm::MustBeRoot()) return `abort;
    boolean ret = <command>Sshd::</command>Read();
    return ret ? `next : `abort;
}

/**
 * Write settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol <command>WriteDialog()</command> {
    ...
}

/**
 * Summary dialog
 * @return dialog result
 */
any <command>SummaryDialog()</command> {
    ..
}

/**
 * Overview dialog
 * @return dialog result
 */
any <command>OverviewDialog()</command> {

    /* Sshd overview dialog caption */
    string caption = _("Sshd Overview");

    list overview = Sshd::Overview();

    /* FIXME table header */
    term contents = Wizard_hw::ConfiguredContent(
	/* Table header */
	`header(_("Number"), _("Sshd")),
	overview, nil, nil, nil, nil );

    contents = Wizard_hw::SpacingAround(contents, 1.5, 1.5, 1.0, 1.0);

    <command>Wizard::SetContentsButtons(caption, contents, HELPS["overview"]:"",
	    Label::BackButton(), Label::FinishButton());</command>

    any ret = nil;
    <command>while (true) {</command>

	<command>ret = UI::UserInput();</command>

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) <command>break</command>;
	    else <command>continue</command>;
	}
        /* add */
        else if(ret == `add_button) {
            ret = <command>`add</command>;
            <command>break</command>;
        }
        /* edit */
        else if(ret == `edit_button) {
            ret = <command>`edit</command>;
            <command>break</command>;
        }
        /* delete */
        else if(ret == `delete_button) {
            <command>continue</command>;
        }
        else if(ret == `next || ret == `back) {
            <command>break</command>;
        }
        else {
            y2error("unexpected retcode: %1", ret);
            <command>continue</command>;
        }
    <command>}</command>

    return ret;
}

/* EOF */
}
</programlisting>