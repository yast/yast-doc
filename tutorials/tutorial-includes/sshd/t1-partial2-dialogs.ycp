<?xml version="1.0"?>
<programlisting>/**
 * Login Settings Dialog
 *
 * @return any dialog result
 */
any LoginSettingsDialog() {

    /* a dialog caption */
    <command>string caption</command> = _("SSHD Server Login Settings");

    <command>term contents</command> = `VBox(
        `Frame (
            _("General Login Settings"),
            `VBox (
                /* A check box */
                `Left(`CheckBox(`id("PrintMotd"),            _("Print &amp;Message of the Day After Login"))),
                /* A check box */
                `Left(`CheckBox(`id("PermitRootLogin"),      _("Permi&amp;t Root Login")))
            )
        ),
        `VSpacing(1),
        `Frame (
            _("Authentication Settings"),
            `VBox (
                /* A text entry */
                `Left(`TextEntry(`id("MaxAuthTries"),           _("Ma&amp;ximum Authentication Tries"))),
                /* A check box */
                `Left(`CheckBox (`id("PasswordAuthentication"), _("Pa&amp;sswordAuthentication"))),
                /* A check box */
                `Left(`CheckBox (`id("RSAAuthentication"),      _("RSA Authenti&amp;cation"))),
                /* A check box */
                `Left(`CheckBox (`id("PubkeyAuthentication"),   _("Public &amp;Key Authentication")))
            )
        ),
        `VStretch()
    );

    <command>Wizard::SetContentsButtons(caption, contents, HELPS["login_settings"]:"",
            Label::BackButton(), Label::NextButton());</command>
    Wizard::SetNextButton(`next, Label::AcceptButton());

    any ret = nil;
    <command>while(true) {</command>

        ret = UI::UserInput();

        /* abort? */
        if(ret == <command>`abort</command>) {
            if(Sshd::Abort()) <command>break</command>;
            else continue;
        /* next */
        } else if(ret == <command>`next</command>) {
            <command>break</command>;
        } else if(ret == <command>`back</command>) {
            <command>break</command>;
        /* unknown */
        } else {
            y2error("unexpected retcode: %1", ret);
            continue;
        }
    <command>}</command>

    Wizard::RestoreNextButton();

    <command>return ret;</command>
}</programlisting>
