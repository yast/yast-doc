<?xml version="1.0" encoding='ISO-8859-1'?>
<!-- =============================================================== -->
<!--
File         : documentation.xml
Author       : Lukas Ocilka
Initial date : 2006/06/27
CVS          : $Id: $
-->
<!-- =============================================================== -->

  <book id="Book-Documentation">
    <bookinfo>
      <title>Source Code Documentation HowTo</title>
      <subtitle>Auto-Generated Documentation</subtitle>
    </bookinfo>
    
    <para>
      A lot of &prog_t; documentation is generated from the source code.
      That's the reason why we should follow some rules when documenting
      the source code (especially functions and variables) to have
      the possibility of auto-generated documentation.
    </para>
    
    <para>
      Why should we have it? It's not needed to create your own modules,
      functions or agents when such things alread exist. You can just use
      something that already exist. But the most important information is
      <emphasis>that</emphasis> it exists, <emphasis>where</emphasis> it
      exists and <emphasis>how</emphasis> to use it. All these pieces of
      information can be in the auto-generated documentation.
    </para>
    
    <para>
      Additionally, if you develop some universal module with, e.g.,
      functionality offering abstraction layer for reading and writing
      records from and into the OpenLDAP server, you should document
      the functionality itself to offer it to others.
    </para>

    <chapter id="documentation_YCP">
      <title>YCP Module and Client Documentation</title>
      <para>
        Most of the modules and clients are written in the YCP programming
        language.
      </para>

      <para>
        Although YCP itself offers more possibilities howto write
        <link linkend="id_ycp_comment">comments</link>, there are some quite
	strict rules that needs to be followed. Don't be afraid, they are easy
	to remember.
      </para>

      <section id="documentation_YCP_tools">
        <title>Documentation-Generation Tool</title>
	<para>
	  Every &prog_t; package, you have installed on your system, has its
	  auto-generated HTML-based documentation in the
	  <filename>/usr/share/doc/packages/_package_name_/.../autodocs/</filename>
	  directory. This documentation is generated by the
	  <command>ycpdoc</command> script &mdash; part of
	  the <literal>yast2-devtools</literal> package.
	</para>

      <important>
        <para>
	  To recognize the comment that should be processed for the autodocs,
	  <command>ycpdoc</command> needs this syntax:
	</para>
	
	<programlisting><command>/**</command>
 *
 * slash and two asterisks identify the comment
 * for file headers, functions and variables
 *
 <command>*/</command></programlisting>
 
        <para>
	</para>
	
	<programlisting><command>/***</command>
 *
 * slash and three asterisks identify the initial comment
 * of file (intro)
 *
 <command>*/</command></programlisting>
 
        <para>
	  If you don't use two (or three) asterisks, the comment doesn't
	  get processed at all.
	</para>
      </important>
	
	<para>
	  Here you can see all available options and arguments of the ycpdoc script.
	  This is the <command>/usr/lib/YaST2/bin/ycpdoc --help</command>
	  command output:
	</para>
	
	<screen><xi:include href="generated-docu/examples/ycpdoc--help.txt"
	    parse="text"
	    xmlns:xi="http://www.w3.org/2003/XInclude"/></screen>
	
	<section id="documentation_htmloutput">
	  <title>HTML Output</title>
	  <para>
	    This is the example of generated HTML-based documentation. Run the
	    command <command>/usr/lib/YaST2/bin/ycpdoc
	    /usr/share/YaST2/modules/FileUtils.ycp</command> and open the just
	    generated HTML files in some HTML browser. First of all, see
	    the one that contains <filename>FileUtils.html</filename>
	    in its name.
	  </para>
	  
	  <para>
	    You can see all global functions and variables documented there.
	    Functions also with their parameters, return types, examples, etc.
	  </para>
	</section>

	<section id="documentation_xmloutput">
	  <title>XML Output</title>
	  <para>
	    This example of generated XML-based documentation. Run the
	    command <command>/usr/lib/YaST2/bin/ycpdoc --format=xml
	    /usr/share/YaST2/modules/FileUtils.ycp</command> and see the just
	    generated <filename>ycpdoc.xml</filename> XML file.
	  </para>
	  
	  <note>
	    <para>
	      XML is not for humans, it's optimized for computers. That's also
	      why the XML output of <command>ycpdoc</command> doesn't so
	      look nice but it's very valuable for text-processing tools.
	    </para>
	  </note>
	  
          <example id="documentation_xmlexample">
	    <title>Examplary XML output reformated and shortened by hand</title>
	    <programlisting><xi:include href="generated-docu/examples/ycpdoc-example.xml"
	      parse="text"
	      xmlns:xi="http://www.w3.org/2003/XInclude"/></programlisting>
	  </example>
	</section>
      </section>

      <section id="documentation_YCP_fileheader">
        <title>YCP File Header</title>

	<para>
	  The file header should show general information about the file name
	  and location, author, and a general purpose.
	</para>

        <example id="documentation_examplefileheader">
	  <title>Exemplary file header</title>
	  <xi:include href="generated-docu/examples/file-header.xml"
	    parse="xml" xmlns:xi="http://www.w3.org/2003/XInclude"/>
	</example>
	  
	<para>
	  File header format:
	</para>
	
	<programlisting>Attribute: value</programlisting>
	
	<para>
	  Possible <literal>Attributes</literal> are:
	</para>
	
	<itemizedlist>
	  <listitem>
	    <para>Authors</para>
	  </listitem>
	  <listitem>
	    <para>Author</para>
	  </listitem>
	  <listitem>
	    <para>Depends</para>
	  </listitem>
	  <listitem>
	    <para>File</para>
	  </listitem>
	  <listitem>
	    <para>Flags</para>
	  </listitem>
	  <listitem>
	    <para>Internal</para>
	  </listitem>
	  <listitem>
	    <para>Module</para>
	  </listitem>
	  <listitem>
	    <para>Package</para>
	  </listitem>
	  <listitem>
	    <para>Summary</para>
	  </listitem>
	</itemizedlist>
	
	<section id="documentation_tagAuthors">
	  <title><literal>Authors</literal> AKA <literal>Author</literal> Attribute</title>
	  <para>
	    Defines the author(s) of the file.
	  </para>

	  <example id="documentation_tagAuthorsEx">
	    <title>Single-line Authors tag</title>
	    <programlisting>Authors: Wendy Graceful &lt;grace@example.com&gt;</programlisting>
	  </example>

	  <example id="documentation_tagAuthorsMLEx">
	    <title>Multi-line Authors tag</title>
	    <programlisting>Authors: Wendy Graceful &lt;grace@example.com&gt;
         Lars Kralewski &lt;lars@example.com&gt;</programlisting>
	  </example>
	</section>
	
	<section id="documentation_tagDepends">
	  <title><literal>Depends</literal> Attribute</title>
	  <para>
	    What does this file / module depend on.
	  </para>
	  
	  <example id="documentation_tagDependsEx">
	    <title>Depends tag</title>
	    <programlisting>Depends: Language</programlisting>
	  </example>
	</section>

	<section id="documentation_tagFile">
	  <title><literal>File</literal> Attribute</title>
	  <para>
	    Relative path where is this file located under the base &prog_t;
	    <filename>/usr/share/YaST2/</filename> path.
	  </para>
	  
	  <example id="documentation_tagFileEx">
	    <title>File tag</title>
	    <programlisting>File: modules/HTTP.ycp</programlisting>
	  </example>
	</section>

	<section id="flags_attribute_stable_unstable">
	  <title><literal>Flags</literal> Attribute</title>
	  <para>
	    Defines the default value for the module stability
	    (read: stability of module API).
	  </para>
	  
	  <para>
	    Possible values are:
	  </para>
	  <itemizedlist>
	    <listitem>
	      <para>Stable</para>
	    </listitem>
	    <listitem>
	      <para>Unstable</para>
	    </listitem>
	  </itemizedlist>
	  
	  <example id="documentation_tagFlagsEx">
	    <title>Flags tag</title>
	    <programlisting>Flags: Stable</programlisting>
	  </example>
	</section>

	<section id="documentation_tagInternal">
	  <title><literal>Internal</literal> Attribute</title>
	  <para>
	    If a module is marked as <emphasis>Internal</emphasis>, it will
	    be omitted while generation the YaST overall documentation.
	    This tag is not mandatory, by default a module is not internal.
	  </para>
	  
	  <example id="documentation_tagPackageEx">
	    <title>Package tag</title>
	    <programlisting> *
 * Author: Joe Example &lt;joe@example.com&gt;
 * Internal
 *</programlisting>
	  </example>
	</section>

	<section id="documentation_tagPackage">
	  <title><literal>Package</literal> AKA <literal>Module</literal>
	   Attribute</title>
	  <para>
	    Textual description of the package (&prog_t; module) that
	    this file belongs to. <emphasis>This tag is obsolete.</emphasis>
	  </para>
	  
	  <example id="documentation_tagPackageEx">
	    <title>Package tag</title>
	    <programlisting>Package: SSHD Configuration Module</programlisting>
	  </example>
	</section>

	<section id="documentation_tagSummary">
	  <title><literal>Summary</literal> Attribute</title>
	  <para>
	    Defines the purpose of this file, such as what does do, how it
	    does that, what it uses for that, etc.
	  </para>
	  
	  <example id="documentation_tagSummaryEx">
	    <title>Multi-line Summary tag</title>
	    <programlisting>Summary: This is a multiline summary for the exemplary &prog_t; module
         that does nothing and has no valuable content at all.</programlisting>
	  </example>
	  
	  <para>
	    <emphasis>Summary</emphasis> tag is something special &mdash;.
	    You don't need to define the tag itself, just write a multiline
	    text after at the bottom of the comment after
	    the <emphasis>$Id:&nbsp;$</emphasis> entry.
	  </para>
	  
	  <example id="documentation_tagSummaryEx">
	    <title>Other Multi-line Summary tag</title>
	    <programlisting>/**
 * File: modules/DoNothingAtAll.ycp
 *
 * ...
 *
 * $Id:&nbsp;$
 *
 * This is a multiline summary for the exemplary &prog_t; module
 * that does nothing and has no valuable content at all.
 */</programlisting>
	  </example>
	</section>
      </section>

      <section id="documentation_YCP_function">
        <title>YCP Functions</title>

	<para>
	  The function header should describe all needed pieces of information
	  about the function. Such as parameters, return value, function's
	  textual description, examples, etc.
	</para>

        <example id="documentation_YCP_functionEx">
	  <title>Simple Example of Function Description</title>
	  <programlisting>/**
 * Returns number of just connected users to the server.
 * You can filter these users by defining the filtering parameter.
 *
 * @param part_of_ip ("192.168.") that users are connected from
 * @return integer number of connected users
 *
 * @see AnotherFunction()
 */
global integer GetCountOfConnectedUsers (string part_of_ip) {
    ...
}</programlisting>
	</example>

        <para>
	  Function description tags:
	</para>
	
	<itemizedlist>
	  <listitem>
	    <para>@deprecated</para>
	  </listitem>
	  <listitem>
	    <para>@descr</para>
	  </listitem>
	  <listitem>
	    <para>@example</para>
	  </listitem>
	  <listitem>
	    <para>@param</para>
	  </listitem>
	  <listitem>
	    <para>@ref</para>
	  </listitem>
	  <listitem>
	    <para>@return</para>
	  </listitem>
	  <listitem>
	    <para>@short</para>
	  </listitem>
	  <listitem>
	    <para>@since</para>
	  </listitem>
	  <listitem>
	    <para>@stable</para>
	  </listitem>
	  <listitem>
	    <para>@struct</para>
	  </listitem>
	  <listitem>
	    <para>@unstable</para>
	  </listitem>
	</itemizedlist>
	
	<section id="doc_tag_xdepr">
	  <title>Description tag <literal>@deprecated</literal></title>
	  <para>
	    Defines that the function has been deprecated. Additionaly defines
	    another function as the replacement.
	  </para>
	  <example id="doct_tagxdeprex">
	    <title>@deprecated tag</title>
	    <programlisting>@deprecated AnotherFunction()</programlisting>
	  </example>
	</section>

	<section id="doc_tag_xdescr">
	  <title>Description tag <literal>@descr</literal></title>
	  <para>
	    Complete description of the function. It might describe
	    the environment or detailed behavior.
	  </para>
	  <example id="doc_tag_xdescrex">
	    <title>Standard description</title>
	    <programlisting>@descr This is a standard multi-line description
       of a function.</programlisting>
	  </example>

	  <example id="doc_tag_xdescrex2">
	    <title>Automatic description</title>
	    <programlisting>/**
* This first line is identified as <emphasis>@short</emphasis>
*
* This multi-line <emphasis>@descr</emphasis> (after a newline) is automatically
* taken as the function description.
*
* Additionally, this multi-line text is automatically taken as another paragraph
* of the function <emphasis>@descr</emphasis> (the number of paragraphs is unlimited).
*/</programlisting>
	  </example>
	</section>

	<section id="doc_tag_xexample">
	  <title>Description tag <literal>@example</literal></title>
	  <para>
	    Block of examples of usage, they are as exported as they
	    are written (like &lt;pre&gt; in HTML).
	  </para>
	  <example id="doc_tag_xexampleex">
	    <title>Multiline @example block</title>
	    <programlisting>@example
list &lt;string&gt; servers = GetListOfNSServers("example.com.");
boolean success = AddNewNSServer("ns4.example.com.", "example.com.");</programlisting>
	  </example>
	</section>

	<section id="doc_tag_xparam">
	  <title>Description tag <literal>@param</literal></title>
	  <para>
	    Describes the parameter of the function. The order
	    of <literal>@param</literal> tags is significant.
	  </para>
	  <example id="doc_tag_xparamex">
	    <title>@param tag</title>
	    <programlisting>/**
 * Adds a new NS Server into list of domain NS servers.
 *
 * @param new_ns_server FQDN
 * @param domain
 * @return boolean successfull
 */
global boolean AddNewNSServer (string new_ns_server, string domain) {
   ...
   return success;
}</programlisting>
	  </example>
	</section>

	<section id="doc_tag_xref">
	  <title>Description tag <literal>@ref</literal></title>
	  <para>
	    Single-line version of <literal>@see</literal> tag.
	  </para>
	  <example id="doc_tag_xrefex">
	    <title>@ref tag</title>
	    <programlisting>@ref AddNewNSServer()</programlisting>
	  </example>
	</section>

	<section id="doc_tag_ret">
	  <title>Description tag <literal>@return</literal></title>
	  <para>
	    Description of the return value.
	  </para>
	  <example id="doc_tag_retex">
	    <title>@return tag</title>
	    <programlisting>/**
 * Removes the NS Server from list of domain NS servers.
 *
 * @param ns_server FQDN
 * @param domain
 * @return boolean successfull
 */
global boolean RemoveNSServer (string ns_server, string domain) {
   ...
   boolean success = true;

   return success;
}</programlisting>
	  </example>
	</section>

	<section id="doc_tag_short">
	  <title>Description tag <literal>@short</literal></title>
	  <para>
	    Short single-line description of the function.
	  </para>
	  <example id="doc_tag_shortex">
	    <title>Standard description</title>
	    <programlisting>@short This function does nothing valuable</programlisting>
	  </example>

	  <example id="doc_tag_shortex2">
	    <title>Automatic description</title>
	    <programlisting>/**
* This first line is identified as <emphasis>@short</emphasis>
*
* This multi-line <emphasis>@descr</emphasis> (after a newline) is automatically
* taken as the function description.
*/</programlisting>
	  </example>
	  
	  <para>
	    See the <literal>@descr</literal> tag.
	  </para>
	</section>

	<section id="doc_tag_since">
	  <title>Description tag <literal>@since</literal></title>
	  <para>
	    Since which version thix function exists. This is not a commonly
	    used tag.
	  </para>
	  <example id="doc_tag_sinceex">
	    <title>@since tag</title>
	    <programlisting>@since: 2.12.65</programlisting>
	  </example>
	</section>

	<section id="doc_tag_stable">
	  <title>Description tag <literal>@stable</literal></title>
	  <para>
	    Defines that the function has a stable API and we don't plan
	    to change it for years.
	  </para>
	  
	  <para>
	    See tag @unstable.
	  </para>
	  
	  <para>
	    This tag might changes the default value of the file's
	    <link linkend="flags_attribute_stable_unstable">stability
	    of the API</link> (just for the current function).
	  </para>
	  
	  <example id="doc_tag_stableex">
	    <title>@stable tag</title>
	    <programlisting>@stable</programlisting>
	  </example>
	</section>

	<section id="doc_tag_struct">
	  <title>Description tag <literal>@struct</literal></title>
	  <para>
	    This tag is used to represent the used data-structure closer.
	    It's as represented as it's written (such as the &lt;pre&gt;
	    HTML tag).
	  </para>

	  <example id="doc_tag_structex">
	    <title>@struct tag</title>
	    <programlisting>@struct returns $[
    // example.com.
    "domain"     : "domain name",

    // list of NS servers assigned to the domain
    "ns_servers" : [ "ns1", "ns2", ... ],

    // map of MX servers $[ "server_name" : priority ]
    "mx_servers" : $[ "mx1" : 10, "mx2" : 5 ],
]</programlisting>
	  </example>
	</section>

	<section id="doct_tag_unstable">
	  <title>Description tag <literal>@unstable</literal></title>
	  <para>
	    Defines that the function has unknown of unstable API and
	    we plan (or might) to change it in the future.
	  </para>
	  
	  <para>
	    See the @stable tag.
	  </para>
	  
	  <example id="doct_tag_unstableex">
	    <title>@unstable tag</title>
	    <programlisting>@unstable</programlisting>
	  </example>
	</section>

      </section>

      <section id="documentation_YCP_variables">
        <title>YCP Variables</title>

	<para>
	  The YCP variable description can contain almost all pieces
	  of information as the YCP
	  <link linkend="documentation_YCP_function">function
	  description</link>
	  except <literal>@param</literal> and <literal>@return</literal>
	  tags that don't make sense here. You can, for instance, describe
	  the variable's textual description, examples, structures, etc.
	  However, it's usual that only the description is given.
	</para>

        <example id="documentation_YCP_variablesex">
	  <title>Simple Example of Variable Description</title>
	  <programlisting>/**
 * Defines the number of connected users for each IP.
 * There might be more connected users from one IP.
 *
 * @struct $[
 *	"192.168.0.1"  : 5,
 *	"192.168.0.12" : 1,
 *	"192.168.0.35" : 3,
 * ]
 *
 * @see GetNumberOfConnectedUsers()
 */
global map &lt;string, integer&gt;  number_of_connected_users = nil;</programlisting>
	</example>
	
	<example id="documentation_YCP_variablesex2">
	  <title>The Most Usual Usage</title>
	  <programlisting>/**
 * Stores the currently selected domain
 */
global string current_domain = "";</programlisting>
	</example>

        <para>
	  Function description tags:
	</para>
	
	<itemizedlist>
	  <listitem>
	    <para>@deprecated</para>
	  </listitem>
	  <listitem>
	    <para>@descr</para>
	  </listitem>
	  <listitem>
	    <para>@example</para>
	  </listitem>
	  <listitem>
	    <para>@ref</para>
	  </listitem>
	  <listitem>
	    <para>@short</para>
	  </listitem>
	  <listitem>
	    <para>@since</para>
	  </listitem>
	  <listitem>
	    <para>@stable</para>
	  </listitem>
	  <listitem>
	    <para>@struct</para>
	  </listitem>
	  <listitem>
	    <para>@unstable</para>
	  </listitem>
	</itemizedlist>

        <para>
          See the YCP <link linkend="documentation_YCP_function">function
	  description</link> for usage and parameters of tags mentioned
	  above.
        </para>
      </section>

    </chapter>

    <chapter id="documentation_PerlModules">
      <title>Perl Module Documentation</title>
      <para>...</para>
      <!-- Fixme: perldoc + %TYPEINFO -->
    </chapter>

    <chapter id="documentation_SCR">
      <title>SCR Agent Documentation</title>
      <para>
        The file header should show what is the SCR Agent good for,
	supported acces types (read/write/execute) and examples
	how to use it.
      </para>
      
      <example id="documentation_SCRex">
        <title>Exemplary SCR Agent Definition</title>
	<xi:include href="generated-docu/examples/sshd.scr"
	    parse="xml"
	    xmlns:xi="http://www.w3.org/2003/XInclude"/>
      </example>
    </chapter>

  </book>

<!-- ====== Allow emacs psgml to parse the document hierarchy ====== -->
<!-- ATTENTION * This MUST be at the end of the document * ATTENTION -->
<!--
Local Variables:
sgml-parent-document: ("documentation.xml")
End:
-->
<!-- ====== Allow emacs psgml to parse the document hierarchy ====== -->
